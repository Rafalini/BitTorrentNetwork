#include <unistd.h>
#include <stdio.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <stdlib.h>
#include <netinet/in.h>
#include <algorithm>
#include <string>
#include <iostream>
#include <thread>

#define SERVERPORT 8080
#define SOCKETERROR (-1)
#define SERVER_BACKLOG 100
#define IPPROTOCOL 0

struct sockaddr_in SA_IN;

void *handel_connection(void* client);
int check(int exp, const char *msg);

int main(int argc, char const *argv[])
{
    int server_fd, new_socket, valread;
    //struct sockaddr_in SA_IN;
    int opt = 1;
    int addrlen = sizeof(SA_IN);
    char buffer[1024] = {0};

    // Creating socket file descriptor
    if ((server_fd = socket(AF_INET, SOCK_STREAM, IPPROTOCOL)) == 0)
    {
        perror("socket failed");
        exit(EXIT_FAILURE);
    }

    // Forcefully attaching socket to the port 8080
    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt)))
    {
        perror("setsockopt");
        exit(EXIT_FAILURE);
    }
    SA_IN.sin_family = AF_INET;
    SA_IN.sin_addr.s_addr = INADDR_ANY;
    SA_IN.sin_port = htons(SERVERPORT);

    //binding
    checkError(bind(server_fd, (struct sockaddr *)&address, sizeof(address)), "bind failed");

    for(;;)
    {
      checkError(listen(server_fd, 3),"listen");
      checkError((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)),"listen");

      int *clientSocket = (int*) malloc(sizeof(int));
      *clientSocket= new_socket;
      pthread_t t;
      pthread_create (&t, NULL, handel_connection, clientSocket);
      // handel_connection(new_socket);
    }
    return 0;
}

void *handel_connection(void *client)
{
  int new_socket =*(int*) client;
  std::string response(1024, 0);
  checkError(read(new_socket, &response[0], 1024), "Failed to read data from socket");
  char incomingAdress[10];
  struct in_addr ipAddr = SA_IN.sin_addr;
  char str[INET_ADDRSTRLEN];
  inet_ntop( AF_INET, &ipAddr, incomingAdress, INET_ADDRSTRLEN );
  std::cout <<"recive2 some message from: "<<incomingAdress << std::endl;
  std::cout <<"recived contents: "<<response<<std::endl;
  std::transform(response.begin(), response.end(),response.begin(), ::toupper);
  send(new_socket , response.c_str() , response.length() , 0 );
  return nullptr;
}
